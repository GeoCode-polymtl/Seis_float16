/*Macros for writing kernels compatible with CUDA and OpenCL */

#ifdef __OPENCL_VERSION__
    #pragma OPENCL EXTENSION cl_khr_fp16 : enable
    #define FUNDEF __kernel
    #define LFUNDEF
    #define GLOBARG __global
    #define LOCARG __local float *lvar
    #define LOCARG2 __local __prec2 *lvar2
    #define LOCID __local
    #define LOCDEF
    #define BARRIER barrier(CLK_LOCAL_MEM_FENCE);
#else
    #define FUNDEF extern "C" __global__
    #define LFUNDEF __device__ __inline__
    #define GLOBARG
    #define LOCARG float *nullarg
    #define LOCARG2 __prec2 *nullarg
    #define LOCDEF extern __shared__ float lvar[];
    #define LOCID
    #define BARRIER __syncthreads();
#endif
/*Macros for FD difference stencils up to order 12 on GPU in 2D
 
 The macros assume the following variables are defined in the kernel:
 -lvar: A float array in local memory
 -gidx, gidz: The grid indices in the global memory
 -lidx, lidz: The grid indices in the local memory
 -FDOH: Half with of the final difference stencil
 -NZ: Global grid size in Z
 -lsizex: Local grid size in x
 -lsizez: Local grid size in z
 -LOCAL_OFF: If 0, uses local memory grid, else uses global memory grid
 -FP16: Type of FP16 computation: 1: use float2 for everything
                                  2: Read half2, compute in float2, write half2
                                  3: Read half2, compute half2, write half2
 */


/*Define functions and macros to be able to change operations types only with
 preprossor directives, that is with different values of FP16. Those functions
 are basic arithmetic operations and conversion between half2 and float2.*/

// DIV allow to change from vector (type2) type to scalar type
#if FP16==0
    #define DIV 1
    #define __gprec float
#else
    #define DIV 2
    #define __gprec float2
#endif

// precision of variables (__prec) and parameters (__pprec) in global memory
#if FP16==0
    #define __prec float
    #define __prec2 float
    #define __pprec float
#elif FP16==1
    #define __prec float
    #define __prec2 float2
    #define __pprec float2
#else
    #define __prec half
    #define __prec2 half2
    #define __pprec half2
#endif

// conversion functions from reading/writing and computations
#if FP16==2
    #define __h22f2(x) __half22float2((x))
    #define __f22h2(x) __float22half2_rn((x))
    #define __pconv(x) __half22float2((x))
#else
    #define __h22f2(x) (x)
    #define __f22h2(x) (x)
    #define __pconv(x) (x)
#endif

// functions to compute with half2 or float2 (only FP16=3 computes with half2)
#if FP16==3
    #define __f22h2c(x) __float22half2_rn((x))
    #define __h22f2c(x) __half22float2((x))
#else
    #define __f22h2c(x) (x)
    #define __h22f2c(x) (x)
#endif

#if FP16==3
    #define __cprec half2
    #define __cprec1 half
#elif FP16==0
    #define __cprec float
    #define __cprec1 float
#else
    #define __cprec float2
    #define __cprec1 float
#endif
#if FP16==0
    #define initc0(v) x=0.0f
#else
    #define initc0(v) (v).x=0.0f;(v).y=0.0f
#endif


// functions to scale parameters

#ifdef __OPENCL_VERSION__
    #if FP16==0
    LFUNDEF float scalefun(float a, int scaler ){
        return ldexp(a, scaler);
    }
    #else
    LFUNDEF float2 scalefun(float2 a, int scaler ){

        float2 output;
        output.x  = ldexp(a.x, scaler);
        output.y  = ldexp(a.y, scaler);
        return output;
    }
    #endif
#else
    #if FP16==0
    LFUNDEF float scalefun(float a, int scaler ){
        return scalbnf(a, scaler);
    }
    #else
    LFUNDEF float2 scalefun(float2 a, int scaler ){

        float2 output;
        output.x  = scalbnf(a.x, scaler);
        output.y  = scalbnf(a.y, scaler);
        return output;
    }
    #endif
#endif

// functions to handle FD stencils on length 2 vectors
#if FP16==0
LFUNDEF float __hp(float *a ){
    return *a;
}
LFUNDEF float __hpi(float *a ){
    return *a;
}
#else
LFUNDEF __prec2 __hp(LOCID __prec *a ){

    __prec2 output;
    *((__prec *)&output) = *a;
    *((__prec *)&output+1) = *(a+1);
    return output;
}
LFUNDEF __prec2 __hpi(LOCID __prec *a ){

    __prec2 output;
    *((__prec *)&output) = *a;
    *((__prec *)&output+1) = *(a-1);
    return output;
}
LFUNDEF __prec2 __hpg(GLOBARG float *a ){

    __prec2 output;
    *((__prec *)&output) = *a;
    *((__prec *)&output+1) = *(a+1);
    return output;
}
LFUNDEF __prec2 __hpgi(GLOBARG float *a ){

    __prec2 output;
    *((__prec *)&output) = *a;
    *((__prec *)&output+1) = *(a-1);
    return output;
}
#endif


#ifndef __OPENCL_VERSION__
//Operators definition for float2 and half2 operations//
__device__ __inline__ float2 operator-(const float2 a) {

    float2 output;
    output.x = -a.x;
    output.y = -a.y;
    return output;

};

__device__ __inline__ float2 operator+(const float2 a, const float2 b) {

    float2 output;
    output.x = a.x+b.x;
    output.y = a.y+b.y;
    return output;

};

__device__ __inline__ float2 operator-(const float2 a, const float2 b) {

    float2 output;
    output.x = a.x-b.x;
    output.y = a.y-b.y;
    return output;

};

__device__ __inline__ float2 operator*(const float2 a, const float2 b) {

    float2 output;
    output.x = a.x*b.x;
    output.y = a.y*b.y;
    return output;

};

__device__ __inline__ float2 operator/(const float2 a, const float2 b) {

    float2 output;
    output.x = a.x/b.x;
    output.y = a.y/b.y;
    return output;

};

__device__ __inline__ float2 operator+(const float a, const float2 b) {

    float2 output;
    output.x = a + b.x;
    output.y = a + b.y;
    return output;

};
__device__ __inline__ float2 operator+(const float2 b, const float a) {

    float2 output;
    output.x = a + b.x;
    output.y = a + b.y;
    return output;

};

__device__ __inline__ float2 operator-(const float a, const float2 b) {

    float2 output;
    output.x = a - b.x;
    output.y = a - b.y;
    return output;

};
__device__ __inline__ float2 operator-(const float2 b, const float a) {

    float2 output;
    output.x = b.x - a;
    output.y = b.y - a;
    return output;

};

__device__ __inline__ float2 operator*(const float a, const float2 b) {

    float2 output;
    output.x = a * b.x;
    output.y = a * b.y;
    return output;

};
__device__ __inline__ float2 operator*(const float2 b, const float a) {

    float2 output;
    output.x = b.x * a;
    output.y = b.y * a;
    return output;

};

__device__ __inline__ float2 operator/(const float a, const float2 b) {

    float2 output;
    output.x = a / b.x;
    output.y = a / b.y;
    return output;

};
__device__ __inline__ float2 operator/(const float2 b, const float a) {

    float2 output;
    output.x = b.x / a;
    output.y = b.y / a;
    return output;

};


__device__ __inline__ half2 operator+(const float a, const half2 b) {

    half2 output;
    output.x = __float2half_rn(a) + b.x;
    output.y = __float2half_rn(a) + b.y;
    return output;

};
__device__ __inline__ half2 operator+(const half2 b, const float a) {

    half2 output;
    output.x = __float2half_rn(a) + b.x;
    output.y = __float2half_rn(a) + b.y;
    return output;

};

__device__ __inline__ half2 operator-(const float a, const half2 b) {

    half2 output;
    output.x = __float2half_rn(a) - b.x;
    output.y = __float2half_rn(a) - b.y;
    return output;

};
__device__ __inline__ half2 operator-(const half2 b, const float a) {

    half2 output;
    output.x = b.x - __float2half_rn(a);
    output.y = b.y - __float2half_rn(a);
    return output;

};

__device__ __inline__ half2 operator*(const float a, const half2 b) {

    half2 output;
    output.x = __float2half_rn(a) * b.x;
    output.y = __float2half_rn(a) * b.y;
    return output;

};
__device__ __inline__ half2 operator*(const half2 b, const float a) {

    half2 output;
    output.x = b.x * __float2half_rn(a);
    output.y = b.y * __float2half_rn(a);
    return output;

};

__device__ __inline__ half2 operator/(const float a, const half2 b) {

    half2 output;
    output.x = __float2half_rn(a) / b.x;
    output.y = __float2half_rn(a) / b.y;
    return output;

};
__device__ __inline__ half2 operator/(const half2 b, const float a) {

    half2 output;
    output.x = b.x / __float2half_rn(a);
    output.y = b.y / __float2half_rn(a);
    return output;

};


__device__ __inline__ float2 operator+(const float2 a, const half2 b) {
    return a + __half22float2(b);
};
__device__ __inline__ float2 operator+(const half2 b, const float2 a) {
    return a + __half22float2(b);
};
__device__ __inline__ float2 operator-(const float2 a, const half2 b) {
    return a - __half22float2(b);
};
__device__ __inline__ float2 operator-(const half2 b, const float2 a) {
    return __half22float2(b) - a;
};
__device__ __inline__ float2 operator*(const float2 a, const half2 b) {
    return a * __half22float2(b);
};
__device__ __inline__ float2 operator*(const half2 b, const float2 a) {
    return __half22float2(b) * a;
};
__device__ __inline__ float2 operator/(const float2 a, const half2 b) {
    return a / __half22float2(b);
};
__device__ __inline__ float2 operator/(const half2 b, const float2 a) {
    return __half22float2(b) / a;
};


//__device__ half2 operator+(half2 a, half2 b) {
//    return __hadd2(a,b);
//};
//__device__ half2 operator-(half2 a, half2 b) {
//    return __hsub2(a,b);
//};
//__device__ half2 operator*(half2 a, half2 b) {
//    return __hmul2(a,b);
//};
//__device__ half2 operator/(half2 a, half2 b) {
//    return __h2div(a,b);
//};
#endif

//Indices for FD stencils//

#if ND==3
    #if LOCAL_OFF==0
        #define ind1(z,y,x)   (x)*DIV*lsizey*lsizez+(y)*DIV*lsizez+(z)
        #define ind2(z,y,x)   (x)*lsizey*lsizez+(y)*lsizez+(z)
        #define indg(z,y,x)   (x)*NY*(NZ)+(y)*(NZ)+(z)
    #else
        #define lidx gidx
        #define lidy gidy
        #define lidz gidz
        #define ind1(z,y,x)   (x)*DIV*(NY)*(NZ)+(y)*DIV*(NZ)+(z)
        #define ind2(z,y,x)   (x)*(NY)*(NZ)+(y)*(NZ)+(z)
    #endif
#else
    #define lidy 0
    #define gidy 0
    #if LOCAL_OFF==0
        #define ind1(z,y,x)  (x)*DIV*lsizez+(z)
        #define ind2(z,y,x)  (x)*lsizez+(z)
        #define indg(z,y,x)  (x)*NZ+(z)
    #else
        #define lidx gidx
        #define lidz gidz
        #define ind1(z,y,x)   (x)*DIV*(NZ)+(z)
        #define ind2(z,y,x)   (x)*(NZ)+(z)
    #endif
#endif


//Load in local memory with the halo for FD in different directions
#define load_local_in(v) lvar2[ind2(lidz,lidy,lidx)]=v[indg(gidz,gidy,gidx)]

#define load_local_halox(v) \
do {\
        if (lidx<2*FDOH)\
            lvar2[ind2(lidz,lidy,lidx-FDOH)]=v[indg(gidz,gidy,gidx-FDOH)];\
        if (lidx+lsizex-3*FDOH<FDOH)\
            lvar2[ind2(lidz,lidy,lidx+lsizex-3*FDOH)]=v[indg(gidz,gidy,gidx+lsizex-3*FDOH)];\
        if (lidx>(lsizex-2*FDOH-1))\
            lvar2[ind2(lidz,lidy,lidx+FDOH)]=v[indg(gidz,gidy,gidx+FDOH)];\
        if (lidx-lsizex+3*FDOH>(lsizex-FDOH-1))\
            lvar2[ind2(lidz,lidy,lidx-lsizex+3*FDOH)]=v[indg(gidz,gidy,gidx-lsizex+3*FDOH)];\
} while(0)

#define load_local_haloy(v) \
do {\
        if (lidy<2*FDOH)\
            lvar2[ind2(lidz,lidy-FDOH,lidx)]=v[indg(gidz,gidy-FDOH,gidx)];\
        if (lidy+lsizey-3*FDOH<FDOH)\
            lvar2[ind2(lidz,lidy+lsizey-3*FDOH,lidx)]=v[indg(gidz,gidy+lsizey-3*FDOH,gidx)];\
        if (lidy>(lsizey-2*FDOH-1))\
            lvar2[ind2(lidz,lidy+FDOH,lidx)]=v[indg(gidz,gidy+FDOH,gidx)];\
        if (lidy-lsizey+3*FDOH>(lsizey-FDOH-1))\
            lvar2[ind2(lidz,lidy-lsizey+3*FDOH,lidx)]=v[indg(gidz,gidy-lsizey+3*FDOH,gidx)];\
} while(0)

#define load_local_haloz(v) \
do {\
        if (lidz<2*FDOH/DIV)\
            lvar2[ind2(lidz-FDOH/DIV,lidy,lidx)]=v[indg(gidz-FDOH/DIV,gidy,gidx)];\
        if (lidz>(lsizez-2*FDOH/DIV-1))\
            lvar2[ind2(lidz+FDOH/DIV,lidy,lidx)]=v[indg(gidz+FDOH/DIV,gidy,gidx)];\
} while(0)


//Forward stencil in x
#if   FDOH ==1
    #define Dxp(v)  HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)]) - __h22f2(v[ind2(lidz,lidy,lidx)]))
#elif FDOH ==2
    #define Dxp(v)  (HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)]) - __h22f2(v[ind2(lidz,lidy,lidx)]))+\
                        HC2*(__h22f2(v[ind2(lidz,lidy,lidx+2)]) - __h22f2(v[ind2(lidz,lidy,lidx-1)])))
#elif FDOH ==3
    #define Dxp(v)  (HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                        HC2*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                        HC3*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-2)])))
#elif FDOH ==4
    #define Dxp(v)  (HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                        HC2*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                        HC3*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                        HC4*(__h22f2(v[ind2(lidz,lidy,lidx+4)])-__h22f2(v[ind2(lidz,lidy,lidx-3)])))
#elif FDOH ==5
    #define Dxp(v)  (HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                        HC2*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                        HC3*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                        HC4*(__h22f2(v[ind2(lidz,lidy,lidx+4)])-__h22f2(v[ind2(lidz,lidy,lidx-3)]))+\
                        HC5*(__h22f2(v[ind2(lidz,lidy,lidx+5)])-__h22f2(v[ind2(lidz,lidy,lidx-4)])))
#elif FDOH ==6
    #define Dxp(v)  (HC1*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                        HC2*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                        HC3*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                        HC4*(__h22f2(v[ind2(lidz,lidy,lidx+4)])-__h22f2(v[ind2(lidz,lidy,lidx-3)]))+\
                        HC5*(__h22f2(v[ind2(lidz,lidy,lidx+5)])-__h22f2(v[ind2(lidz,lidy,lidx-4)]))+\
                        HC6*(__h22f2(v[ind2(lidz,lidy,lidx+6)])-__h22f2(v[ind2(lidz,lidy,lidx-5)])))
#endif

//Backward stencil in x
#if   FDOH ==1
    #define Dxm(v) HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])   - __h22f2(v[ind2(lidz,lidy,lidx-1)]))
#elif FDOH ==2
    #define Dxm(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])   - __h22f2(v[ind2(lidz,lidy,lidx-1)]))\
                      +HC2*(__h22f2(v[ind2(lidz,lidy,lidx+1)]) - __h22f2(v[ind2(lidz,lidy,lidx-2)])))
#elif FDOH ==3
    #define Dxm(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])  -__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-3)])))
#elif FDOH ==4
    #define Dxm(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])  -__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-3)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-4)])))
#elif FDOH ==5
    #define Dxm(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])  -__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-3)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-4)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy,lidx+4)])-__h22f2(v[ind2(lidz,lidy,lidx-5)])))
#elif FDOH ==6
    #define Dxm(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])  -__h22f2(v[ind2(lidz,lidy,lidx-1)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy,lidx+1)])-__h22f2(v[ind2(lidz,lidy,lidx-2)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy,lidx+2)])-__h22f2(v[ind2(lidz,lidy,lidx-3)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy,lidx+3)])-__h22f2(v[ind2(lidz,lidy,lidx-4)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy,lidx+4)])-__h22f2(v[ind2(lidz,lidy,lidx-5)]))+\
                       HC6*(__h22f2(v[ind2(lidz,lidy,lidx+5)])-__h22f2(v[ind2(lidz,lidy,lidx-6)])))
#endif

//Forward stencil in y
#if   FDOH ==1
    #define Dyp(v) HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))
#elif FDOH ==2
    #define Dyp(v) (HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))\
                      +HC2*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)])))
#elif FDOH ==3
    #define Dyp(v) (HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)])))
#elif FDOH ==4
    #define Dyp(v) (HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+4,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)])))
#elif FDOH ==5
    #define Dyp(v) (HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+4,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy+5,lidx)])-__h22f2(v[ind2(lidz,lidy-4,lidx)])))
#elif FDOH ==6
    #define Dyp(v) (HC1*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+4,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy+5,lidx)])-__h22f2(v[ind2(lidz,lidy-4,lidx)]))+\
                       HC6*(__h22f2(v[ind2(lidz,lidy+6,lidx)])-__h22f2(v[ind2(lidz,lidy-5,lidx)])))
#endif

//Backward stencil in y
#if   FDOH ==1
    #define Dym(v) HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))
#elif FDOH ==2
    #define Dym(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))\
                      +HC2*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)])))
#elif FDOH ==3
    #define Dym(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)])))
#elif FDOH ==4
    #define Dym(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-4,lidx)])))
#elif FDOH ==5
    #define Dym(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-4,lidx)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy+4,lidx)])-__h22f2(v[ind2(lidz,lidy-5,lidx)])))
#elif FDOH ==6
    #define Dym(v) (HC1*(__h22f2(v[ind2(lidz,lidy,lidx)])-__h22f2(v[ind2(lidz,lidy-1,lidx)]))+\
                       HC2*(__h22f2(v[ind2(lidz,lidy+1,lidx)])-__h22f2(v[ind2(lidz,lidy-2,lidx)]))+\
                       HC3*(__h22f2(v[ind2(lidz,lidy+2,lidx)])-__h22f2(v[ind2(lidz,lidy-3,lidx)]))+\
                       HC4*(__h22f2(v[ind2(lidz,lidy+3,lidx)])-__h22f2(v[ind2(lidz,lidy-4,lidx)]))+\
                       HC5*(__h22f2(v[ind2(lidz,lidy+4,lidx)])-__h22f2(v[ind2(lidz,lidy-5,lidx)]))+\
                       HC6*(__h22f2(v[ind2(lidz,lidy+5,lidx)])-__h22f2(v[ind2(lidz,lidy-6,lidx)])))
#endif

//Forward stencil in z
#if   FDOH ==1
    #define Dzp(v) HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)])) - __h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))
#elif FDOH ==2
    #define Dzp(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)])) - __h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))\
                      +HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)])) - __h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)]))))
#elif FDOH ==3
    #define Dzp(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)]))))
#elif FDOH ==4
    #define Dzp(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+4,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)]))))
#elif FDOH ==5
    #define Dzp(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+4,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)])))+\
                       HC5*(__h22f2(__hp(&v[ind1(DIV*lidz+5,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-4,lidy,lidx)]))))
#elif FDOH ==6
    #define Dzp(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+4,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)])))+\
                       HC5*(__h22f2(__hp(&v[ind1(DIV*lidz+5,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-4,lidy,lidx)])))+\
                       HC6*(__h22f2(__hp(&v[ind1(DIV*lidz+6,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-5,lidy,lidx)]))))
#endif


//Backward stencil in z
#if   FDOH ==1
    #define Dzm(v) HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))   - __h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))
#elif FDOH ==2
    #define Dzm(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))   - __h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))\
                      +HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)])) - __h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)]))))
#elif FDOH ==3
    #define Dzm(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))  -__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)]))))
#elif FDOH ==4
    #define Dzm(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))  -__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-4,lidy,lidx)]))))
#elif FDOH ==5
    #define Dzm(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))  -__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-4,lidy,lidx)])))+\
                       HC5*(__h22f2(__hp(&v[ind1(DIV*lidz+4,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-5,lidy,lidx)]))))
#elif FDOH ==6
    #define Dzm(v) (HC1*(__h22f2(__hp(&v[ind1(DIV*lidz,lidy,lidx)]))  -__h22f2(__hp(&v[ind1(DIV*lidz-1,lidy,lidx)])))+\
                       HC2*(__h22f2(__hp(&v[ind1(DIV*lidz+1,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-2,lidy,lidx)])))+\
                       HC3*(__h22f2(__hp(&v[ind1(DIV*lidz+2,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-3,lidy,lidx)])))+\
                       HC4*(__h22f2(__hp(&v[ind1(DIV*lidz+3,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-4,lidy,lidx)])))+\
                       HC5*(__h22f2(__hp(&v[ind1(DIV*lidz+4,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-5,lidy,lidx)])))+\
                       HC6*(__h22f2(__hp(&v[ind1(DIV*lidz+5,lidy,lidx)]))-__h22f2(__hp(&v[ind1(DIV*lidz-6,lidy,lidx)]))))
#endif


/*------------------------------------------------------------------------
 * Copyright (C) 2016 For the list of authors, see file AUTHORS.
 *
 * This file is part of SeisCL.
 *
 * SeisCL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.0 of the License only.
 *
 * SeisCL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SeisCL. See file COPYING and/or
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 --------------------------------------------------------------------------*/

/*Update of the velocity in 2D SV using half precision. The variable FP16 is
 used to control how FP16 is used: 1: FP32, 2: FP16 IO only, 3: FP16 IO and
 arithmetics*/

FUNDEF void update_v(int offcomm,
                     GLOBARG __pprec *rip,       GLOBARG __pprec *rkp,
                     GLOBARG __prec2 *sxx,       GLOBARG __prec2 *sxz,
                     GLOBARG __prec2 *szz,       GLOBARG __prec2 *vx,
                     GLOBARG __prec2 *vz,        GLOBARG float *taper,
                     GLOBARG float *K_z,         GLOBARG float *a_z,
                     GLOBARG float *b_z,         GLOBARG float *K_z_half,
                     GLOBARG float *a_z_half,    GLOBARG float *b_z_half,
                     GLOBARG float *K_x,         GLOBARG float *a_x,
                     GLOBARG float *b_x,         GLOBARG float *K_x_half,
                     GLOBARG float *a_x_half,    GLOBARG float *b_x_half,
                     GLOBARG __prec2 *psi_sxx_x, GLOBARG __prec2 *psi_sxz_x,
                     GLOBARG __prec2 *psi_sxz_z, GLOBARG __prec2 *psi_szz_z,
                     LOCARG2)
{
    //Local memory
    #ifdef __OPENCL_VERSION__
    __local __prec * lvar=lvar2;
    #else
    extern __shared__ __prec2 lvar2[];
    __prec * lvar=(__prec *)lvar2;
    #endif

    //Grid position
    // If we use local memory
    #if LOCAL_OFF==0
        #ifdef __OPENCL_VERSION__
        int lsizez = get_local_size(0)+2*FDOH/DIV;
        int lsizex = get_local_size(1)+2*FDOH;
        int lidz = get_local_id(0)+FDOH/DIV;
        int lidx = get_local_id(1)+FDOH;
        int gidz = get_global_id(0)+FDOH/DIV;
        int gidx = get_global_id(1)+FDOH+offcomm;
        #else
        int lsizez = blockDim.x+2*FDOH/DIV;
        int lsizex = blockDim.y+2*FDOH;
        int lidz = threadIdx.x+FDOH/DIV;
        int lidx = threadIdx.y+FDOH;
        int gidz = blockIdx.x*blockDim.x+threadIdx.x+FDOH/DIV;
        int gidx = blockIdx.y*blockDim.y+threadIdx.y+FDOH+offcomm;
        #endif

    // If local memory is turned off
    #elif LOCAL_OFF==1
        #ifdef __OPENCL_VERSION__
        int gid = get_global_id(0);
        int glsizez = (NZ-2*FDOH/DIV);
        int gidz = gid%glsizez+FDOH/DIV;
        int gidx = (gid/glsizez)+FDOH+offcomm;
        #else
        int lsizez = blockDim.x+2*FDOH/DIV;
        int lsizex = blockDim.y+2*FDOH;
        int lidz = threadIdx.x+FDOH/DIV;
        int lidx = threadIdx.y+FDOH;
        int gidz = blockIdx.x*blockDim.x+threadIdx.x+FDOH/DIV;
        int gidx = blockIdx.y*blockDim.y+threadIdx.y+FDOH+offcomm;
        #endif

    #endif

    int indp = ((gidx)-FDOH)*(NZ-2*FDOH/DIV)+((gidz)-FDOH/DIV);
    int indv = gidx*NZ+gidz;


    //Define private derivatives
    __cprec sxx_x1;
    __cprec sxz_x2;
    __cprec sxz_z2;
    __cprec szz_z1;

    //Local memory definitions if local is used
    #if LOCAL_OFF==0
        #define lsxx lvar
        #define lszz lvar
        #define lsxz lvar
        #define lsxx2 lvar2
        #define lszz2 lvar2
        #define lsxz2 lvar2

    //Local memory definitions if local is not used
    #elif LOCAL_OFF==1

        #define lsxx sxx
        #define lszz szz
        #define lsxz sxz
        #define lidz gidz
        #define lidx gidx

    #endif

    //Calculation of the spatial derivatives
    {
    #if LOCAL_OFF==0
        load_local_in(sxx);
        load_local_halox(sxx);
        BARRIER
    #endif
        sxx_x1 = Dxp(lsxx2);

    #if LOCAL_OFF==0
        BARRIER
        load_local_in(szz);
        load_local_haloz(szz);
        BARRIER
    #endif
        szz_z1 = Dzp(lszz);

    #if LOCAL_OFF==0
        BARRIER
        load_local_in(sxz);
        load_local_halox(sxz);
        load_local_haloz(sxz);
        BARRIER
    #endif
        sxz_x2 = Dxm(lsxz2);
        sxz_z2 = Dzm(lsxz);

    }

    // To stop updating if we are outside the model (global id must be a
    //multiple of local id in OpenCL, hence we stop if we have a global id
    //outside the grid)
    #if  LOCAL_OFF==0
    #if COMM12==0
    if ( gidz>(NZ-FDOH/DIV-1) ||  (gidx-offcomm)>(NX-FDOH-1-LCOMM) )
        return;
    #else
    if ( gidz>(NZ-FDOH/DIV-1)  )
        return;
    #endif
    #endif

     // Correct spatial derivatives to implement CPML
    #if ABS_TYPE==1
    {
        int i,k,indm,indn;
        if (DIV*gidz>DIV*NZ-NAB-FDOH-1){
            i =gidx - FDOH;
            k =gidz - NZ + 2*NAB/DIV + FDOH/DIV;
            indm=2*NAB - 1 - k*DIV;
            indn = (i)*(2*NAB/DIV)+(k);

            psi_sxz_z[indn] = __f22h2(__hpgi(&b_z[indm+1]) * psi_sxz_z[indn]
                                      + __hpgi(&a_z[indm+1]) * sxz_z2);
            sxz_z2 = sxz_z2 / __hpgi(&K_z[indm+1]) + psi_sxz_z[indn];
            psi_szz_z[indn] = __f22h2(__hpgi(&b_z_half[indm]) * psi_szz_z[indn]
                                      + __hpgi(&a_z_half[indm]) * szz_z1);
            szz_z1 = szz_z1 / __hpgi(&K_z_half[indm]) + psi_szz_z[indn];
        }

        #if FREESURF==0
        if (DIV*gidz-FDOH<NAB){
            i =gidx-FDOH;
            k =gidz*DIV-FDOH;
            indn = (i)*(2*NAB/DIV)+(k/DIV);

            psi_sxz_z[indn] = __f22h2(__hpg(&b_z[k]) * psi_sxz_z[indn]
                                      + __hpg(&a_z[k]) * sxz_z2);
            sxz_z2 = sxz_z2 / __hpg(&K_z[k]) + psi_sxz_z[indn];
            psi_szz_z[indn] = __f22h2(__hpg(&b_z_half[k]) * psi_szz_z[indn]
                                      + __hpg(&a_z_half[k]) * szz_z1);
            szz_z1 = szz_z1 / __hpg(&K_z_half[k]) + psi_szz_z[indn];
        }
        #endif

        #if DEVID==0 & MYLOCALID==0
        if (gidx-FDOH<NAB){
            i =gidx-FDOH;
            k =gidz-FDOH/DIV;
            indn = (i)*(NZ-2*FDOH/DIV)+(k);

            psi_sxx_x[indn] = __f22h2(b_x_half[i] * psi_sxx_x[indn]
                                      + a_x_half[i] * sxx_x1);
            sxx_x1 = sxx_x1 / K_x_half[i] + psi_sxx_x[indn];
            psi_sxz_x[indn] = __f22h2(b_x[i] * psi_sxz_x[indn]
                                      + a_x[i] * sxz_x2);
            sxz_x2 = sxz_x2 / K_x[i] + psi_sxz_x[indn];
        }
        #endif

        #if DEVID==NUM_DEVICES-1 & MYLOCALID==NLOCALP-1
        if (gidx>NX-NAB-FDOH-1){
            i =gidx - NX+NAB+FDOH+NAB;
            k =gidz-FDOH/DIV;
            indm=2*NAB-1-i;
            indn = (i)*(NZ-2*FDOH/DIV)+(k);

            psi_sxx_x[indn] = __f22h2(b_x_half[indm] * psi_sxx_x[indn]
                                      + a_x_half[indm] * sxx_x1);
            sxx_x1 = sxx_x1 / K_x_half[indm] + psi_sxx_x[indn];
            psi_sxz_x[indn] = __f22h2(b_x[indm+1] * psi_sxz_x[indn]
                                      + a_x[indm+1] * sxz_x2);
            sxz_x2 = sxz_x2 / K_x[indm+1] + psi_sxz_x[indn];
        }
        #endif
       }
    #endif

    //Define and load private parameters and variables
    __cprec lvx = __h22f2(vx[indv]);
    __cprec lvz = __h22f2(vz[indv]);
    __cprec lrip = __pconv(rip[indp]);
    __cprec lrkp = __pconv(rkp[indp]);

    // Update the variables
    lvx=lvx+(sxx_x1+sxz_z2)*lrip;
    lvz=lvz+(szz_z1+sxz_x2)*lrkp;
    #if ABS_TYPE==2
    {
    #if FREESURF==0
        if (DIV*gidz-FDOH<NAB){
            lvx = lvx * __hpg(&taper[DIV*gidz-FDOH]);
            lvz = lvz * __hpg(&taper[DIV*gidz-FDOH]);
        }
    #endif
        if (DIV*gidz>DIV*NZ-NAB-FDOH-1){
            lvx = lvx * __hpgi(&taper[DIV*NZ-FDOH-DIV*gidz-1]);
            lvz = lvz * __hpgi(&taper[DIV*NZ-FDOH-DIV*gidz-1]);
        }

    #if DEVID==0 & MYLOCALID==0
        if (gidx-FDOH<NAB){
            lvx = lvx * taper[gidx-FDOH];
            lvz = lvz * taper[gidx-FDOH];
        }
    #endif

    #if DEVID==NUM_DEVICES-1 & MYLOCALID==NLOCALP-1
        if (gidx>NX-NAB-FDOH-1){
            lvx = lvx * taper[NX-FDOH-gidx-1];
            lvz = lvz * taper[NX-FDOH-gidx-1];
        }
    #endif
    }
    #endif

    //Write updated values to global memory
    vx[indv] = __f22h2(lvx);
    vz[indv] = __f22h2(lvz);
}
